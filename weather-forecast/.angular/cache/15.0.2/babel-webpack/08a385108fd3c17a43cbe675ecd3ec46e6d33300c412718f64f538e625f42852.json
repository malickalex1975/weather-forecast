{"ast":null,"code":"import { API_KEY, BASE_GEO_URL, CURRENT_WEATHER_URL } from 'src/app/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpService {\n  constructor(http) {\n    this.http = http;\n  }\n  getPlaces(place) {\n    return this.http.get(BASE_GEO_URL + `?q=${place}` + `&limit=5&appid=${API_KEY}`);\n  }\n  getCurrentWeather(lat, lon, units = 'metric', lang = 'en') {\n    return this.http.get(CURRENT_WEATHER_URL + `lat=${lat}&lon=${lon}&appid=${API_KEY}&units=${units}&lang=${lang}`);\n  }\n  static #_ = this.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SACEA,OAAO,EACPC,YAAY,EACZC,mBAAmB,QAEd,mBAAmB;;;AAK1B,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,SAAS,CAACC,KAAc;IACtB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAClBP,YAAY,GAAG,MAAMM,KAAK,EAAE,GAAG,kBAAkBP,OAAO,EAAE,CAC3D;EACH;EACAS,iBAAiB,CACfC,GAAW,EACXC,GAAW,EACXC,KAAK,GAAG,QAAQ,EAChBC,IAAI,GAAG,IAAI;IAEX,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAClBN,mBAAmB,GACjB,OAAOQ,GAAG,QAAQC,GAAG,UAAUX,OAAO,UAAUY,KAAK,SAASC,IAAI,EAAE,CACvE;EACH;EAAC;qBAlBUV,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAW,SAAXX,WAAW;IAAAY,YAFV;EAAM","names":["API_KEY","BASE_GEO_URL","CURRENT_WEATHER_URL","HttpService","constructor","http","getPlaces","place","get","getCurrentWeather","lat","lon","units","lang","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\malic\\source\\repos\\weather\\weather-forecast\\weather-forecast\\src\\app\\core\\services\\http.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  API_KEY,\r\n  BASE_GEO_URL,\r\n  CURRENT_WEATHER_URL,\r\n  IPlace,\r\n} from 'src/app/constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HttpService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getPlaces(place?: string): Observable<any> {\r\n    return this.http.get(\r\n      BASE_GEO_URL + `?q=${place}` + `&limit=5&appid=${API_KEY}`\r\n    );\r\n  }\r\n  getCurrentWeather(\r\n    lat: number,\r\n    lon: number,\r\n    units = 'metric',\r\n    lang = 'en'\r\n  ): Observable<any> {\r\n    return this.http.get(\r\n      CURRENT_WEATHER_URL +\r\n        `lat=${lat}&lon=${lon}&appid=${API_KEY}&units=${units}&lang=${lang}`\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}