{"ast":null,"code":"import { debounceTime, of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http.service\";\nimport * as i2 from \"./request.service\";\nexport class SearchService {\n  constructor(http, requestService) {\n    this.http = http;\n    this.requestService = requestService;\n    this.places = of([]);\n  }\n  findPlaces() {\n    return this.places.pipe(switchMap(() => this.requestService.getRequest()), debounceTime(1000), switchMap(request => {\n      if (!request) {\n        request = ' ';\n      }\n      return this.http.getPlaces(request);\n    }));\n  }\n  static #_ = this.ɵfac = function SearchService_Factory(t) {\n    return new (t || SearchService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.RequestService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchService,\n    factory: SearchService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAGEA,YAAY,EAIZC,EAAE,EACFC,SAAS,QAEJ,MAAM;;;;AAQb,OAAM,MAAOC,aAAa;EACxBC,YACUC,IAAiB,EACjBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAExB,WAAM,GAAoBL,EAAE,CAAC,EAAE,CAAC;EAD7B;EAGHM,UAAU;IACR,OAAO,IAAI,CAACC,MAAM,CAACC,IAAI,CACrBP,SAAS,CAAC,MAAM,IAAI,CAACI,cAAc,CAACI,UAAU,EAAE,CAAC,EACjDV,YAAY,CAAC,IAAI,CAAC,EAClBE,SAAS,CAAES,OAAO,IAAI;MACpB,IAAI,CAACA,OAAO,EAAE;QAACA,OAAO,GAAC,GAAG;;MACxB,OAAO,IAAI,CAACN,IAAI,CAACO,SAAS,CAACD,OAAO,CAAC;IAEvC,CAAC,CAAC,CACH;EACH;EAAC;qBAjBUR,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAU,SAAbV,aAAa;IAAAW,YAFZ;EAAM","names":["debounceTime","of","switchMap","SearchService","constructor","http","requestService","findPlaces","places","pipe","getRequest","request","getPlaces","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\malic\\source\\repos\\weather\\weather-forecast\\weather-forecast\\src\\app\\core\\services\\search.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  BehaviorSubject,\r\n  debounce,\r\n  debounceTime,\r\n  map,\r\n  mergeMap,\r\n  Observable,\r\n  of,\r\n  switchMap,\r\n  tap,\r\n} from 'rxjs';\r\nimport { IPlace } from 'src/app/constants';\r\nimport { HttpService } from './http.service';\r\nimport { RequestService } from './request.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SearchService {\r\n  constructor(\r\n    private http: HttpService,\r\n    private requestService: RequestService\r\n  ) {}\r\n  places: Observable<any> = of([]);\r\n\r\n  findPlaces() {\r\n    return this.places.pipe(\r\n      switchMap(() => this.requestService.getRequest()),\r\n      debounceTime(1000),\r\n      switchMap((request) => {\r\n        if (!request) {request=' '}\r\n          return this.http.getPlaces(request);\r\n        \r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}