{"ast":null,"code":"import { map, switchMap, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/language.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class TranslatePipe {\n  constructor(langService, http) {\n    this.langService = langService;\n    this.http = http;\n  }\n  transform(value) {\n    return this.langService.getLang().pipe(switchMap(lang => this.http.get(`assets/lang/${lang}.json`)), map(json => json[value]), tap(data => console.log(data)));\n  }\n  static #_ = this.ɵfac = function TranslatePipe_Factory(t) {\n    return new (t || TranslatePipe)(i0.ɵɵdirectiveInject(i1.LanguageService, 16), i0.ɵɵdirectiveInject(i2.HttpClient, 16));\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"translate\",\n    type: TranslatePipe,\n    pure: true\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAEC,SAAS,EAAEC,GAAG,QAAQ,MAAM;;;;AAM1C,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,WAA4B,EAAUC,IAAgB;IAAtD,gBAAW,GAAXD,WAAW;IAA2B,SAAI,GAAJC,IAAI;EAAe;EAE7EC,SAAS,CAACC,KAAa;IAEvB,OAAO,IAAI,CAACH,WAAW,CAClBI,OAAO,EAAE,CACTC,IAAI,CAACT,SAAS,CAAEU,IAAI,IAAK,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,eAAeD,IAAI,OAAO,CAAC,CAAC,EACpEX,GAAG,CAAEa,IAAQ,IAAGA,IAAI,CAACL,KAAK,CAAC,CAAC,EAC5BN,GAAG,CAACY,IAAI,IAAEC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAC3B;EAEL;EAAC;qBAZUX,aAAa;EAAA;EAAA;;UAAbA,aAAa;IAAAc;EAAA","names":["map","switchMap","tap","TranslatePipe","constructor","langService","http","transform","value","getLang","pipe","lang","get","json","data","console","log","pure"],"sourceRoot":"","sources":["C:\\Users\\malic\\source\\repos\\weather\\weather-forecast\\weather-forecast\\src\\app\\shared\\pipes\\translate.pipe.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { map, switchMap, tap } from 'rxjs';\r\nimport { LanguageService } from 'src/app/core/services/language.service';\r\n\r\n@Pipe({\r\n  name: 'translate',\r\n})\r\nexport class TranslatePipe implements PipeTransform {\r\n  constructor(private langService: LanguageService, private http: HttpClient) {}\r\n\r\n  transform(value: string) {\r\n  \r\n  return this.langService\r\n      .getLang()\r\n      .pipe(switchMap((lang) => this.http.get(`assets/lang/${lang}.json`)),\r\n      map((json:any)=>json[value]),\r\n      tap(data=>console.log(data))\r\n      );\r\n      \r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}