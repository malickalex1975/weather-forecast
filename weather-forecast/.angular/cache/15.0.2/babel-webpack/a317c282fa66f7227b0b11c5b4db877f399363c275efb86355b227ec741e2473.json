{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { LAST_PLACES } from 'src/app/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nexport class RememberPlacesService {\n  constructor(storage) {\n    this.storage = storage;\n    this.placesArray$$ = new BehaviorSubject([]);\n  }\n  remember(place) {\n    let arr = this.getLastPlaces();\n    if (!arr.some(i => i.name === place.name && i.country === place.country && i.state === place.state)) {\n      arr.push(place);\n      this.storage.setItem(LAST_PLACES, JSON.stringify(arr));\n      this.emitPlaces();\n    }\n  }\n  getLastPlaces() {\n    return JSON.parse(this.storage.getItem(LAST_PLACES) || '[]');\n  }\n  emitPlaces() {\n    this.placesArray$$.next(this.getLastPlaces());\n  }\n  getSubject() {\n    this.emitPlaces();\n    return this.placesArray$$;\n  }\n  clearPlaces() {\n    this.storage.setItem(LAST_PLACES, JSON.stringify([]));\n    this.emitPlaces();\n  }\n  delete(place) {\n    console.log(\"delete\", place);\n    let arr = this.getLastPlaces();\n    arr = arr.filter(i => i.name !== place.name && i.country !== place.country && i.state !== place.state);\n    this.storage.setItem(LAST_PLACES, JSON.stringify(arr));\n    this.emitPlaces();\n  }\n  static #_ = this.ɵfac = function RememberPlacesService_Factory(t) {\n    return new (t || RememberPlacesService)(i0.ɵɵinject(i1.StorageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RememberPlacesService,\n    factory: RememberPlacesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}