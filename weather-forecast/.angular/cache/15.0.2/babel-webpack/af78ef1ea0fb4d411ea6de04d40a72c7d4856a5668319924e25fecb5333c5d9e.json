{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { LANG, LAST_SEARCH } from 'src/app/constants';\nimport { LastPlacesComponent } from './components/last-places/last-places.component';\nlet MainComponent = class MainComponent {\n  constructor(storage, searchService, requestService, http, rememberPlaces, getCurrentPlace, colorService) {\n    this.storage = storage;\n    this.searchService = searchService;\n    this.requestService = requestService;\n    this.http = http;\n    this.rememberPlaces = rememberPlaces;\n    this.getCurrentPlace = getCurrentPlace;\n    this.colorService = colorService;\n    this.isMoreInfo = false;\n    this.searchRequest = '';\n    this.places$ = this.searchService.findPlaces();\n    this.isChosen = false;\n    this.tempColor$$ = this.colorService.emitColor();\n  }\n  ngOnInit() {\n    this.searchRequest = this.storage.getItem(LAST_SEARCH) || '';\n    this.subscription1 = this.requestService.getRequest().subscribe(data => {\n      this.searchRequest = data;\n      this.isChosen = false;\n      this.rememberSearch();\n    });\n    this.subscription2 = this.getCurrentPlace.getPlace().subscribe(data => {\n      this.getCurrentWeather(data.latitude, data.longitude);\n      this.searchRequest = data.city;\n      this.rememberSearch();\n    });\n    this.subscription3 = this.requestService.getCoords().subscribe(data => {\n      this.getCurrentWeather(...data);\n      this.isChosen = true;\n    });\n  }\n  rememberSearch() {\n    this.storage.setItem(LAST_SEARCH, this.searchRequest);\n  }\n  findPlaces() {\n    this.isChosen = false;\n    this.requestService.setRequest(this.searchRequest);\n  }\n  getCurrentWeather(lat, lon) {\n    this.isChosen = true;\n    let currentLanguage = this.storage.getItem(LANG) || 'en';\n    if (lat && lon) {\n      this.currentWeather$ = this.http.getCurrentWeather(lat, lon, 'metric', currentLanguage);\n    }\n  }\n  getTime(time) {\n    return new Date(time * 1000);\n  }\n  rememberPlace(place) {\n    this.rememberPlaces.remember(place);\n  }\n  convertPressure(p) {\n    return (p * 0.750062).toFixed(0);\n  }\n  getFlagStyle(country) {\n    if (country) {\n      return `background-image: url(assets/img/png/${country?.toLowerCase()}.png)`;\n    } else return '';\n  }\n  ngOnDestroy() {\n    this.subscription1?.unsubscribe();\n    this.subscription2?.unsubscribe();\n    this.subscription3?.unsubscribe();\n  }\n};\n__decorate([ViewChild(LastPlacesComponent, {\n  static: false\n})], MainComponent.prototype, \"lastPlaces\", void 0);\nMainComponent = __decorate([Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})], MainComponent);\nexport { MainComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAqBC,SAAS,QAAQ,eAAe;AAEvE,SAAiBC,IAAI,EAAEC,WAAW,QAAQ,mBAAmB;AAQ7D,SAASC,mBAAmB,QAAQ,gDAAgD;AAO7E,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAYxBC,YACUC,OAAuB,EACvBC,aAA4B,EAC5BC,cAA8B,EAC9BC,IAAiB,EACjBC,cAAqC,EACrCC,eAAuC,EACvCC,YAAyB;IANzB,YAAO,GAAPN,OAAO;IACP,kBAAa,GAAbC,aAAa;IACb,mBAAc,GAAdC,cAAc;IACd,SAAI,GAAJC,IAAI;IACJ,mBAAc,GAAdC,cAAc;IACd,oBAAe,GAAfC,eAAe;IACf,iBAAY,GAAZC,YAAY;IAhBtB,eAAU,GAAG,KAAK;IAClB,kBAAa,GAAG,EAAE;IAClB,YAAO,GAAG,IAAI,CAACL,aAAa,CAACM,UAAU,EAAE;IAEzC,aAAQ,GAAG,KAAK;IAIhB,gBAAW,GAAC,IAAI,CAACD,YAAY,CAACE,SAAS,EAAE;EAStC;EAEHC,QAAQ;IACN,IAAI,CAACC,aAAa,GAAG,IAAI,CAACV,OAAO,CAACW,OAAO,CAACf,WAAW,CAAC,IAAI,EAAE;IAC5D,IAAI,CAACgB,aAAa,GAAG,IAAI,CAACV,cAAc,CACrCW,UAAU,EAAE,CACZC,SAAS,CAAEC,IAAY,IAAI;MAC1B,IAAI,CAACL,aAAa,GAAGK,IAAI;MACzB,IAAI,CAACC,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACC,cAAc,EAAE;IACvB,CAAC,CAAC;IACJ,IAAI,CAACC,aAAa,GAAG,IAAI,CAACb,eAAe,CACtCc,QAAQ,EAAE,CACVL,SAAS,CAAEC,IAAS,IAAI;MACvB,IAAI,CAACK,iBAAiB,CAACL,IAAI,CAACM,QAAQ,EAAEN,IAAI,CAACO,SAAS,CAAC;MACrD,IAAI,CAACZ,aAAa,GAAGK,IAAI,CAACQ,IAAI;MAC9B,IAAI,CAACN,cAAc,EAAE;IACvB,CAAC,CAAC;IACJ,IAAI,CAACO,aAAa,GAAG,IAAI,CAACtB,cAAc,CACrCuB,SAAS,EAAE,CACXX,SAAS,CAAEC,IAA8C,IAAI;MAC5D,IAAI,CAACK,iBAAiB,CAAC,GAAGL,IAAI,CAAC;MAC/B,IAAI,CAACC,QAAQ,GAAG,IAAI;IACtB,CAAC,CAAC;EACN;EACAC,cAAc;IACZ,IAAI,CAACjB,OAAO,CAAC0B,OAAO,CAAC9B,WAAW,EAAE,IAAI,CAACc,aAAc,CAAC;EACxD;EACAH,UAAU;IACR,IAAI,CAACS,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACd,cAAc,CAACyB,UAAU,CAAC,IAAI,CAACjB,aAAa,CAAC;EACpD;EACAU,iBAAiB,CAACQ,GAAY,EAAEC,GAAY;IAC1C,IAAI,CAACb,QAAQ,GAAG,IAAI;IACpB,IAAIc,eAAe,GAAG,IAAI,CAAC9B,OAAO,CAACW,OAAO,CAAChB,IAAI,CAAC,IAAI,IAAI;IACxD,IAAIiC,GAAG,IAAIC,GAAG,EAAE;MACd,IAAI,CAACE,eAAe,GAAG,IAAI,CAAC5B,IAAI,CAACiB,iBAAiB,CAChDQ,GAAG,EACHC,GAAG,EACH,QAAQ,EACRC,eAAe,CAChB;;EAEL;EACAE,OAAO,CAACC,IAAY;IAClB,OAAO,IAAIC,IAAI,CAACD,IAAI,GAAG,IAAI,CAAC;EAC9B;EACAE,aAAa,CAACC,KAAa;IACzB,IAAI,CAAChC,cAAc,CAACiC,QAAQ,CAACD,KAAK,CAAC;EACrC;EACAE,eAAe,CAACC,CAAS;IACvB,OAAO,CAACA,CAAC,GAAG,QAAQ,EAAEC,OAAO,CAAC,CAAC,CAAC;EAClC;EAIAC,YAAY,CAACC,OAAe;IAC1B,IAAIA,OAAO,EAAE;MACX,OAAO,wCAAwCA,OAAO,EAAEC,WAAW,EAAE,OAAO;KAC7E,MAAM,OAAO,EAAE;EAClB;EACAC,WAAW;IACT,IAAI,CAAChC,aAAa,EAAEiC,WAAW,EAAE;IACjC,IAAI,CAAC3B,aAAa,EAAE2B,WAAW,EAAE;IACjC,IAAI,CAACrB,aAAa,EAAEqB,WAAW,EAAE;EACnC;CACD;AApFCC,YADCpD,SAAS,CAACG,mBAAmB,EAAE;EAAEkD,MAAM,EAAE;AAAK,CAAE,CAAC,iDACE;AAFzCjD,aAAa,eALzBL,SAAS,CAAC;EACTuD,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWpD,aAAa,CAsFzB;SAtFYA,aAAa","names":["Component","ViewChild","LANG","LAST_SEARCH","LastPlacesComponent","MainComponent","constructor","storage","searchService","requestService","http","rememberPlaces","getCurrentPlace","colorService","findPlaces","emitColor","ngOnInit","searchRequest","getItem","subscription1","getRequest","subscribe","data","isChosen","rememberSearch","subscription2","getPlace","getCurrentWeather","latitude","longitude","city","subscription3","getCoords","setItem","setRequest","lat","lon","currentLanguage","currentWeather$","getTime","time","Date","rememberPlace","place","remember","convertPressure","p","toFixed","getFlagStyle","country","toLowerCase","ngOnDestroy","unsubscribe","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\malic\\source\\repos\\weather\\weather-forecast\\weather-forecast\\src\\app\\pages\\main\\main.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { map, Observable, Subscription, tap } from 'rxjs';\r\nimport { IPlace, LANG, LAST_SEARCH } from 'src/app/constants';\r\nimport { ColorService } from 'src/app/core/services/color.service';\r\nimport { GetCurrentPlaceService } from 'src/app/core/services/get-current-place.service';\r\nimport { HttpService } from 'src/app/core/services/http.service';\r\nimport { RememberPlacesService } from 'src/app/core/services/remember-places.service';\r\nimport { RequestService } from 'src/app/core/services/request.service';\r\nimport { SearchService } from 'src/app/core/services/search.service';\r\nimport { StorageService } from 'src/app/core/services/storage.service';\r\nimport { LastPlacesComponent } from './components/last-places/last-places.component';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.scss'],\r\n})\r\nexport class MainComponent implements OnInit, OnDestroy {\r\n  @ViewChild(LastPlacesComponent, { static: false })\r\n  private lastPlaces: LastPlacesComponent | undefined;\r\n  isMoreInfo = false;\r\n  searchRequest = '';\r\n  places$ = this.searchService.findPlaces();\r\n  currentWeather$?: Observable<any>;\r\n  isChosen = false;\r\n  subscription1?: Subscription;\r\n  subscription2?: Subscription;\r\n  subscription3?: Subscription;\r\n  tempColor$$=this.colorService.emitColor()\r\n  constructor(\r\n    private storage: StorageService,\r\n    private searchService: SearchService,\r\n    private requestService: RequestService,\r\n    private http: HttpService,\r\n    private rememberPlaces: RememberPlacesService,\r\n    private getCurrentPlace: GetCurrentPlaceService,\r\n    private colorService:ColorService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.searchRequest = this.storage.getItem(LAST_SEARCH) || '';\r\n    this.subscription1 = this.requestService\r\n      .getRequest()\r\n      .subscribe((data: string) => {\r\n        this.searchRequest = data;\r\n        this.isChosen = false;\r\n        this.rememberSearch();\r\n      });\r\n    this.subscription2 = this.getCurrentPlace\r\n      .getPlace()\r\n      .subscribe((data: any) => {\r\n        this.getCurrentWeather(data.latitude, data.longitude);\r\n        this.searchRequest = data.city;\r\n        this.rememberSearch();\r\n      });\r\n    this.subscription3 = this.requestService\r\n      .getCoords()\r\n      .subscribe((data: [number | undefined, number | undefined]) => {\r\n        this.getCurrentWeather(...data);\r\n        this.isChosen = true;\r\n      });\r\n  }\r\n  rememberSearch() {\r\n    this.storage.setItem(LAST_SEARCH, this.searchRequest!);\r\n  }\r\n  findPlaces() {\r\n    this.isChosen = false;\r\n    this.requestService.setRequest(this.searchRequest);\r\n  }\r\n  getCurrentWeather(lat?: number, lon?: number) {\r\n    this.isChosen = true;\r\n    let currentLanguage = this.storage.getItem(LANG) || 'en';\r\n    if (lat && lon) {\r\n      this.currentWeather$ = this.http.getCurrentWeather(\r\n        lat,\r\n        lon,\r\n        'metric',\r\n        currentLanguage\r\n      );\r\n    }\r\n  }\r\n  getTime(time: number) {\r\n    return new Date(time * 1000);\r\n  }\r\n  rememberPlace(place: IPlace) {\r\n    this.rememberPlaces.remember(place);\r\n  }\r\n  convertPressure(p: number) {\r\n    return (p * 0.750062).toFixed(0);\r\n  }\r\n  \r\n\r\n  \r\n  getFlagStyle(country: string) {\r\n    if (country) {\r\n      return `background-image: url(assets/img/png/${country?.toLowerCase()}.png)`;\r\n    } else return '';\r\n  }\r\n  ngOnDestroy() {\r\n    this.subscription1?.unsubscribe();\r\n    this.subscription2?.unsubscribe();\r\n    this.subscription3?.unsubscribe();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}